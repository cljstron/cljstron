;;; Application level configuration file.
;;; See app.org.edn in CLJStron for file generation.
;;;
;;; :base are the base values taken for :main and every :plugs.
;;; Every given value replaces value in the :base for its key.
;;;
;;; Then recursively every values in the key-values pairs are replaced :
;;; - If it's a key it's replaced by the associated key value until it's a string
;;; - If it's an list it's replaced by a string which is the concatenation
;;; of all the strings, given that keys are replaced too by the string
;;; values associated.
;;; - If it's a map keyed values are transformed recursively.
;;; - If it's a set value is not changed
;;; - If it's a vector values are transformed recursively.
;;;
;;; - at the end of the process all set values are transformed in
;;; their values, There should be only one value in the set so :
;;; #{:aaa} -> :aaa
;;; #{[:www '(1 2 3 "aaaa")]} -> [:www (1 2 3 "aaaa")]
;;; #{{:www '(1 2 3)} -> {:www (1 2 3)}

{
  ;; default values for whole app
  :app
  {
    :parent :-base
    :user "cljstron"
    :mail-host "gmail.com"
    :version "0.0.5"
    :licence "MIT"
    :resources "resources"
    :author "Ivan Pierre <kilroysoft@gmail.com> http://about.me/ivan_pierre"
    :src ["src"]
    :apps (:quote [:main :generate])
    :bins {:generate "./generate.js"}
    :repository
    { :type "git",
      :url :git-url},

    :cljs-deps
    [ [camel-snake-kebab "0.4.0"]
      [cljs-node-io "0.5.0"]
      [org.clojure/tools.reader "1.1.0"]]

    :keywords
    [ "electron"
      "clojurescript"
      "CLJStron"]}

  ;; values for main app
  :main
  { :parent :app
    :project "cljstron"
    :exec "main"
    :bugs-mail (:user :mail-host)
    :scripts {:start "electron ."}
    :npm-deps
      { :shadow-cljs "^2.0.59"}
    :description
      "A library to manage and develop `electron` applications in `ClojureScript`... and `Clojure`?"}

  ;; values for generate app (will be tranfered in another project)
  :generate
  { :parent :app
    :project "cljstron-generate"
    :exec "generate"
    :description "Generate all config files"}

  :plugs
  { :parent :app
    :simple
    { :project "cljstron-simple"
      :window :exec}}}
