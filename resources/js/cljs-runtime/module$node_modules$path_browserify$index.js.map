{
"version":3,
"file":"module$node_modules$path_browserify$index.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/path-browserify/index.js"],
"sourcesContent":["shadow.js.provide(\"module$node_modules$path_browserify$index\", function(require,module,exports) {\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe =\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\nvar splitPath = function(filename) {\n  return splitPathRe.exec(filename).slice(1);\n};\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function(path) {\n  var result = splitPath(path),\n      root = result[0],\n      dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n};\n\n\nexports.basename = function(path, ext) {\n  var f = splitPath(path)[2];\n  // TODO: make this comparison case-insensitive on windows?\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\n\nexports.extname = function(path) {\n  return splitPath(path)[3];\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n\n});"],
"names":["shadow","js","provide","require","module","exports","normalizeArray","parts","allowAboveRoot","up","i","length","last","splice","unshift","filter","xs","f","res","push","splitPathRe","resolve","exports.resolve","resolvedPath","resolvedAbsolute","arguments","path","process","cwd","TypeError","charAt","split","p","join","normalize","exports.normalize","isAbsolute","trailingSlash","substr","exports.isAbsolute","exports.join","paths","Array","prototype","slice","call","index","relative","exports.relative","from","to","trim","arr","start","end","fromParts","toParts","Math","min","samePartsLength","outputParts","concat","sep","delimiter","dirname","exports.dirname","result","exec","root","dir","basename","exports.basename","ext","extname","exports.extname","str","len"]
}
