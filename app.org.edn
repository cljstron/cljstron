;;; General configuration file.
;;; This is resident with CLJStron library
;;;
;;; Values of parent is recursively read first.
;;; Every given value replaces value of the parent for its key.
;;;
;;; Then recursively every values in the key-values pairs are replaced :
;;; - If it's a keyword it's replaced by the associated key value until it's a non key
;;; - If it's a map keyed values are transformed recursively.
;;; - If it's a set values are transformed recursively.
;;; - If it's a vector values are transformed recursively.
;;; - If it's a list values are transformed recursively.
;;;   - If the first value of the list is a known function it is executed
;;;     There is different levels of execution :base, :final and :write.
;;;     - :base functions are executed recursively.
;;;       - (str strings) When all values are transformed in strings, concatene these.
;;;       - (loop iterable code) Code is generated for all values of the listed apps definitions.
;;;       - (symbol string) Arg is recursively transformed until String witch is concatenated into a symbol.
;;;       - (quote any) Keep value unmodified. (i.e. keeping keywords uninterpreted).
;;;     - :final. Executed at the end.
;;;       - (quote any) Suppress the (quote) letting only argument.
;;;     - :write. Last transform based only on text file.
;;;       - (inline string) get the string and put it litterally in place w/o double quotes. i.e.for meta-data

;; default values for all applications
{ :-base
  { :github       "https://github.com/"
    :licences     "https://opensource.org/licenses/"
    :homepage     (str :github :user "/" :project "/blob/master/README.md")
    :bugs-page    (str :github :user "/" :project "/issue")
    :bugs-mail    (str :user "@" :mail-host)
    :bugs         { :url :bugs-page
                    :email :bugs-mail}
    :npm-user     (str "@" :user "/")
    :npm          (str :npm-user :project)
    :exec-file    (str :exec ".js")
    :exec-ns      (str "main." :exec)
    :exec-fn      (symbol :exec-ns "/" :exec)
    :renderer     (str :resources "/js/" :exec ".js")
    :git-url      (str :github :user "/" :project ".git")

    ; Values to be defined in the app.edn config file
    :npm-deps         {}
    :npm-dev-deps     {}
    :scripts          {}
    :directories.doc  []
    :apps             []
    :bins             {}
    :user             ""
    :project          ""
    :licence          ""
    :exec             ""
    :mail-host        ""
    :resources        ""
    :src              ""}

  ; templates
  :-gen-files
    {
      :parent :main

      :code
      {
        ;; generate clj makefile
        :clj
        { :output :edn
          :project ; ("project.clj")
          (defproject (symbol :project) :version
            (quote :license)        { :name :licence
                                      :url (str "https://opensource.org/licenses/" :licence)}
            (quote :description)    :description
            (quote :dependencies)   (merge :cljs-deps :lein-deps)
            (quote :plugins)        :plug-ins
            (quote :hooks)          [leiningen.cljsbuild]
            (quote :clean-targets)  (inline "^{:protect false}")
                                    (merge
                                      (loop :apps [:exec-file])
                                      [ "resources/js"
                                        "target"])
            (quote :cljsbuild)
            { :builds
              (loop :apps
                [ { :id :str-id
                    :compiler
                    { :output-to      :exec-file
                      :main           :exec-fn
                      :source-paths   :src
                      :target         (quote :nodejs)
                      :optimizations  (quote :none)
                      :pretty-print   false
                      :cache-analysis true}}])
              :figwheel
              { :http-server-root   "resources"
                :css-dirs           ["resources/css"]
                :ring-handler       tools.figwheel-middleware/app
                :server-port        3449}})}

        ;; generate boot makefile
        :boot
        {
          :output :edn
          :build ; ("build.boot")
          {}}

        ;; generate edn makefile
        :edn
        {
          :output :edn
          :shadow-cljs ; ("shadow-cljs.edn")
          { :source-paths :src
            :dependencies :cljs-deps
            ; We'll loop only on main for now, but it should work
            :builds
            (loop :apps
              {:id
                { :target (quote :node-script)
                  :output-to :exec-file
                  :main :exec-fn}})}}

        ;; generate json file
        :json
        {
          :output :json
          :package ; ("package.json")
          {
            :description :description
            :repository :repository
            :license :licence
            :homepage :homepage
            :name :npm
            :bugs :bugs
            :scripts :scripts
            :keywords :keywords
            :author :author
            :bin :bins
            :version :version
            :directories.doc :directories.doc
            :main :exec-file
            :dependencies :npm-deps
            :devDependencies :npm-dev-deps}}}}}
