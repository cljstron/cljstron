;;; General configuration file.
;;; This is resident with CLJStron library
;;;
;;; :base are the base values taken for :main and every :plugs.
;;; Every given value replaces value in the :base for its key.
;;;
;;; Then recursively every values in the key-values pairs are replaced :
;;; - If it's a key it's replaced by the associated key value until it's a string
;;; - If it's an list it's replaced by a string which is the concatenation
;;; of all the strings, given that keys are replaced too by the string
;;; values associated.
;;; - If it's a map keyed values are transformed recursively.
;;; - If it's a set value is not changed
;;; - If it's a vector values are transformed recursively.
;;;
;;; - at the end of the process all set values are transformed in
;;; their values, There should be only one value in the set so :
;;; #{:aaa} -> :aaa
;;; #{[:www '(1 2 3 "aaaa")]} -> [:www (1 2 3 "aaaa")]
;;; #{{:www '(1 2 3)} -> {:www (1 2 3)}

;; default values for all applications
{ :-base
  { :github "https://github.com/"
    :homepage (:str :github :user "/" :project "/blob/master/README.md")
    :bugs-page (:str :github :user "/" :project "/issue")
    :bugs-mail (:str :user "@" :mail-host)
    :bugs {:url :bugs-page :email :bugs-mail}    ; change npm-user to "" if it's a general package
    :bins {}
    :npm-user (:str "@" :user "/")
    :npm (:str :npm-user :project)
    :npm-deps {}
    :npm-dev-deps {}
    :scripts {}
    :directories.doc []
    :apps []
    :exec-file (:str :exec ".js")
    :exec-ns (:str "main." :exec)
    :exec-fn (:symbol (:str :exec-ns "/" :exec))
    :renderer (:str :resources "/js/" :exec ".js")
    :git-url (:str :github :user "/" :project ".git")
    :user ""
    :project ""
    :exec ""
    :mail-host ""
    :resources ""
    :src ""}


  :-gen-files
    {
      :parent :main

      :code
      {
        ;; generate clj makefile
        :clj
        { :output (:quote :edn)
          :project ; ("project.clj")
          {}}

        ;; generate boot makefile
        :boot
        {
          :output :edn
          :build ; ("build.boot")
          {}}

        ;; generate edn makefile
        :edn
        {
          :output :edn
          :shadow-cljs ; ("shadow-cljs.edn")
          { :source-paths :src
            :dependencies :cljs-deps
            ; We'll loop on application and generate according to every app data
            :builds ( :loop :apps
                        { :target (:quote :node-script),
                          :output-to :exec-file,
                          :main :exec-fn})}}

        ;; generate json file
        :json
        {
          :output :json
          :package ; ("package.json")
          {
            :description :description
            :repository :repository
            :license :licence
            :homepage :homepage,
            :name :npm
            :bugs :bugs
            :scripts :scripts
            :keywords :keywords
            :author :author
            :bin :bins
            :version :version
            :directories.doc :directories.doc
            :main :exec-file
            :dependencies :npm-deps
            :devDependencies :npm-dev-deps}}}}}
